# ( start end proc -- )
def loop {
    # ( start end proc -- proc start end start end )
    rotr 2dup
    < {  # ( start end -- ? )
        rotl  # ( proc start end -- start end proc )
        dup eval
        rotl 1 +  # ( start end proc -- end proc (start + 1) )
        rotr  # ( end proc (start + 1) -- (start + 1) end proc )
        loop # ( (start + 1) end proc -- )
    } {
        3drop  # ( proc start end -- )
    } if
}

0 10 {
    rotl  # ( start end proc -- end proc start )
    dup println
    rotr  # ( end proc start -- start end proc )
} loop
